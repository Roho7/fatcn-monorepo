
// This file is auto-generated. Do not edit manually.
export const componentSources: Record<string, string> = {
  "avatar": "import * as AvatarPrimitive from '@radix-ui/react-avatar';\nimport { cva } from 'class-variance-authority';\nimport React from 'react';\nimport { cn } from '../lib';\n\nconst avatarVariants = cva(\n  'bg-primary/50 overflow-hidden flex items-center justify-center',\n  {\n    variants: {\n      size: {\n        xs: 'w-4 h-4 rounded-sm',\n        sm: 'w-8 h-8',\n        md: 'w-10 h-10',\n        lg: 'w-12 h-12',\n      },\n      shape: {\n        circle: 'rounded-full',\n        square: 'rounded-md',\n      },\n    },\n    defaultVariants: {\n      size: 'md',\n      shape: 'circle',\n    },\n  }\n);\n\nconst avatarRingVariants = cva('ring-ring', {\n  variants: {\n    size: {\n      xs: 'ring-1',\n      sm: 'ring-1',\n      md: 'ring-2',\n      lg: 'ring-[3px]',\n    },\n  },\n});\n\nconst avatarFallbackVariants = cva('flex h-full w-full items-center justify-center rounded-full bg-muted', {\n  variants: {\n    size: {\n      xs: 'w-4 h-4 text-[8px]',\n      sm: 'w-8 h-8 text-sm',\n      md: 'w-10 h-10 text-base',\n      lg: 'w-12 h-12 text-lg',\n    },\n  },\n  defaultVariants: {\n    size: 'md',\n  },\n});\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback> & {\n    size?: 'xs' | 'sm' | 'md' | 'lg';\n  }\n>(({ className, size, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      avatarFallbackVariants({ size }),\n      className\n    )}\n    {...props}\n  />\n));\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn('aspect-square h-full w-full', className)}\n    {...props}\n  />\n));\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root> & {\n    size: 'xs' | 'sm' | 'md' | 'lg';\n    shape: 'circle' | 'square';\n    ring?: boolean;\n  }\n>(({ className, size, shape, children, ring, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      'relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full',\n      avatarVariants({ size, shape }),\n      ring && avatarRingVariants({ size }),\n      className\n    )}\n    {...props}\n  >\n    {React.Children.map(children, child => {\n      if (React.isValidElement(child) && child.type === AvatarFallback) {\n        return React.cloneElement(child, { size } as any);\n      }\n      return child;\n    })}\n  </AvatarPrimitive.Root>\n));\nAvatar.displayName = 'Avatar';\n\nexport { Avatar, AvatarFallback, AvatarImage };\n",
  "button": "import { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport * as React from 'react';\nimport { cn } from '../lib';\n\n\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:bg-muted disabled:text-muted-foreground',\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground hover:bg-accent shadow ',\n        secondary: 'bg-background text-foreground hover:bg-accent shadow border border-border',\n        destructive:\n          'bg-destructive text-destructive-foreground hover:bg-destructive/90 shadow ',\n        outline:\n          'text-secondary-foreground hover:bg-secondary/90 shadow ring-ring ring-1',\n        ghost: 'text-foreground hover:bg-accent',\n        link: 'text-foreground underline-offset-4 hover:underline',\n        gradient:\n          'bg-gradient-complimentary text-complimentary-foreground ring-2 ring-complimentary font-medium transition-[background-position] duration-300 bg-[size:200%_200%] hover:bg-[position:100%_100%] shadow',\n      },\n      size: {\n        xs: 'h-6 min-w-6 rounded-md px-1 text-xs',\n        sm: 'h-10 rounded-md px-2 text-xs',\n        md: 'h-12 px-3 py-2 rounded-lg',\n        lg: 'h-14 rounded-xl px-4',\n        icon: 'h-9 w-9 shrink-0',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md',\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : 'button';\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };\n",
  "callout": "import { cva } from 'class-variance-authority';\nimport {\n  AlertCircleIcon,\n  CheckmarkCircle01Icon,\n  InformationCircleIcon,\n  SettingsError01Icon,\n} from 'hugeicons-react';\nimport React from 'react';\nimport { cn } from '../lib';\n\ntype CalloutProps = {\n  variant?: 'default' | 'info' | 'warning' | 'error' | 'success';\n};\n\nconst calloutVariants = cva(\n  'rounded-lg border p-4 flex items-center gap-2 w-full callout',\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary/10 text-primary-foreground border-border',\n        info: 'bg-blue-100 text-blue-800 border-blue-200',\n        warning: 'bg-yellow-100 text-yellow-800 border-yellow-200',\n        error: 'bg-red-100 text-red-800 border-red-200',\n        success: 'bg-green-100 text-green-800 border-green-200',\n      },\n    },\n  }\n);\n\nconst calloutIcons = {\n  default: <InformationCircleIcon className=\"h-4 w-4 shrink-0\" />,\n  info: <InformationCircleIcon className=\"h-4 w-4 shrink-0\" />,\n  warning: <AlertCircleIcon className=\"h-4 w-4 shrink-0\" />,\n  error: <SettingsError01Icon className=\"h-4 w-4 shrink-0\" />,\n  success: <CheckmarkCircle01Icon className=\"h-4 w-4 shrink-0\" />,\n};\n\nconst Callout = ({\n  children,\n  variant = 'default',\n  ...props\n}: CalloutProps & React.HTMLAttributes<HTMLDivElement>) => {\n  return (\n    <div className={cn(calloutVariants({ variant }))} {...props}>\n      {calloutIcons[variant]}\n      <div className=\"text-sm\">{children}</div>\n    </div>\n  );\n};\n\nCallout.displayName = 'Callout';\nexport { Callout };\n",
  "card": "import * as React from 'react';\nimport { useContext } from 'react';\n\nimport { cva, VariantProps } from 'class-variance-authority';\nimport { cn } from '../lib';\n\nconst cardVariants = cva('flex flex-col space-y-1.5', {\n  variants: {\n    variant: {\n      default: 'bg-card text-card-foreground shadow',\n      secondary: 'bg-background text-primary-foreground shadow border border-border',\n    },\n    size: {\n      sm: 'p-4 rounded-md',\n      md: 'p-6 rounded-lg',\n      lg: 'p-8 rounded-xl',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n    size: 'md',\n  },\n});\n\ninterface CardProps extends React.HTMLAttributes<HTMLDivElement> {\n  size?: 'sm' | 'md' | 'lg' | null;\n  variant?: 'default' | 'secondary' | null;\n}\n\nconst CardContext = React.createContext<CardProps | null>(null);\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof cardVariants>\n>(({ className, size = 'md', variant = 'default', ...props }, ref) => (\n  <CardContext.Provider value={{ size, variant }}>\n    <div\n      ref={ref}\n      className={cn(cardVariants({ size, variant, className }))}\n      {...props}\n    />\n  </CardContext.Provider>\n));\nCard.displayName = 'Card';\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const parentCard = useContext(CardContext);\n  const sizeStyles = {\n    sm: 'px-2 py-1 text-sm',\n    md: 'px-4 py-2 text-md',\n    lg: 'px-6 py-4 text-xl',\n  }[parentCard?.size || 'md'];\n\n  return (\n    <div\n      ref={ref}\n      className={cn('flex flex-col', sizeStyles, className)}\n      {...props}\n    />\n  );\n});\nCardHeader.displayName = 'CardHeader';\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => {\n  const parentCard = useContext(CardContext);\n  const sizeStyles = {\n    sm: 'text-sm',\n    md: 'text-lg',\n    lg: 'text-xl',\n  }[parentCard?.size || 'md'];\n\n  const variantStyles = {\n    default: 'text-primary-foreground',\n    secondary: 'text-primary-foreground',\n  }[parentCard?.variant || 'default'];\n\n  return (\n    <h3\n      ref={ref}\n      className={cn(\n        'font-semibold leading-none tracking-tight',\n        sizeStyles,\n        variantStyles,\n        className\n      )}\n      {...props}\n    />\n  );\n});\nCardTitle.displayName = 'CardTitle';\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const parentCard = useContext(CardContext);\n  const variantStyles = {\n    default: 'text-primary-foreground/50',\n    secondary: 'text-muted-foreground',\n  }[parentCard?.variant || 'default'];\n  return (\n    <div\n      ref={ref}\n      className={cn('text-sm', variantStyles, className)}\n      {...props}\n    />\n  );\n});\nCardDescription.displayName = 'CardDescription';\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const parentCard = useContext(CardContext);\n\n  const sizeStyles = {\n    sm: 'px-2 py-1 text-sm',\n    md: 'px-4 py-2 text-base',\n    lg: 'px-6 py-4 text-lg',\n  }[parentCard?.size || 'md'];\n\n  const variantStyles = {\n    default: 'text-primary-foreground',\n    secondary: 'text-primary-foreground',\n  }[parentCard?.variant || 'default'];\n\n  return (\n    <div\n      ref={ref}\n      className={cn(sizeStyles, variantStyles, className)}\n      {...props}\n    />\n  );\n});\nCardContent.displayName = 'CardContent';\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const parentCard = useContext(CardContext);\n  const sizeStyles = {\n    sm: 'p-2',\n    md: 'p-4',\n    lg: 'p-6',\n  }[parentCard?.size || 'md'];\n\n  return (\n    <div\n      ref={ref}\n      className={cn('flex items-center', sizeStyles, className)}\n      {...props}\n    />\n  );\n});\nCardFooter.displayName = 'CardFooter';\n\nexport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle\n};\n\n",
  "checkbox": "'use client';\n\nimport * as CheckboxPrimitive from '@radix-ui/react-checkbox';\nimport { Tick01Icon } from 'hugeicons-react';\nimport * as React from 'react';\nimport { cn } from '../lib';\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root> & {\n    label?: string;\n  }\n>(({ className, label, ...props }, ref) => (\n  <label className=\"text-sm text-primary-foreground\">\n    <div className=\"flex items-center gap-2\">\n      <CheckboxPrimitive.Root\n        ref={ref}\n        className={cn(\n          'peer h-5 w-5 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',\n          className\n        )}\n        {...props}\n      >\n        <CheckboxPrimitive.Indicator\n          className={cn('flex items-center justify-center text-current')}\n        >\n          <Tick01Icon className=\"h-4 w-4\" />\n        </CheckboxPrimitive.Indicator>\n      </CheckboxPrimitive.Root>\n      {label && <div>{label}</div>}\n    </div>\n  </label>\n));\nCheckbox.displayName = CheckboxPrimitive.Root.displayName;\n\nexport { Checkbox };\n",
  "code": "'use client';\nimport { cva } from 'class-variance-authority';\nimport { Copy01Icon } from 'hugeicons-react';\nimport React, { useState } from 'react';\nimport { cn } from '../lib';\nimport { Button } from './button';\nimport { Tooltip, TooltipContent, TooltipTrigger } from './tooltip';\n\ntype CodeProps = {\n  children?: React.ReactNode;\n  className?: string;\n  variant?: 'default' | 'secondary';\n  showCopyButton?: boolean;\n};\n\nconst codeVariants = cva(\n  'bg-muted p-4 h-16 rounded-lg flex items-center justify-between border border-border',\n  {\n    variants: {\n      variant: {\n        default: '',\n        secondary: 'bg-secondary',\n      },\n    },\n  }\n);\nconst Code = ({\n  children,\n  className,\n  variant = 'default',\n  showCopyButton = false,\n  ...props\n}: CodeProps & React.HTMLAttributes<HTMLPreElement>) => {\n  const [isCopied, setIsCopied] = useState(false);\n  const [isTooltipVisible, setIsTooltipVisible] = useState(false);\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(children as string);\n    setIsCopied(true);\n    setIsTooltipVisible(true);\n\n    setTimeout(() => {\n      setIsTooltipVisible(false);\n    }, 1000);\n\n    setTimeout(() => {\n      setIsCopied(false);\n    }, 2000);\n  };\n\n  return (\n    <pre\n      className={cn(codeVariants({ variant }), className, 'relative')}\n      {...props}\n    >\n      {showCopyButton && (\n        <Tooltip open={isTooltipVisible}>\n          <TooltipTrigger\n            asChild\n            onMouseEnter={() => setIsTooltipVisible(true)}\n            onMouseLeave={() => setIsTooltipVisible(false)}\n          >\n            <Button variant=\"ghost\" size=\"icon\" onClick={handleCopy}>\n              <Copy01Icon className=\"h-4 w-4\" />\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent className=\"transition-opacity duration-150\">\n            {isCopied ? 'Copied' : 'Copy to clipboard'}\n          </TooltipContent>\n        </Tooltip>\n      )}\n      <code className=\"text-sm text-secondary-foreground\">{children}</code>\n    </pre>\n  );\n};\n\nCode.displayName = 'Code';\n\nexport { Code };\n",
  "command-box": "'use client';\nimport { DialogTitle, type DialogProps } from '@radix-ui/react-dialog';\nimport { VisuallyHidden } from '@radix-ui/react-visually-hidden';\nimport { Command as CommandPrimitive } from 'cmdk';\nimport React from 'react';\nimport { cn } from '../lib';\nimport { Dialog, DialogContent, DialogHeader } from './dialog';\n\nconst Command = React.forwardRef<\n  React.ComponentRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => {\n  return (\n    <CommandPrimitive\n      ref={ref}\n      className={cn(\n        \"flex h-full flex-col overflow-hidden rounded-md p-4\",\n        className\n      )}\n      {...props}\n    />\n  );\n});\nCommand.displayName = CommandPrimitive.displayName;\n\nconst CommandInput = React.forwardRef<\n  React.ComponentRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Input\n    ref={ref}\n    className={cn(\n      'flex h-9 w-full rounded-lg border border-input bg-input px-3 py-1 text-base text-primary-foreground shadow transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n      className\n    )}\n    {...props}\n  />\n));\nCommandInput.displayName = CommandPrimitive.Input.displayName;\n\nconst CommandGroup = React.forwardRef<\n  React.ComponentRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      'flex flex-col gap-1 overflow-hidden rounded-md pt-4 text-xs text-muted-foreground',\n      className\n    )}\n    {...props}\n  />\n));\nCommandGroup.displayName = CommandPrimitive.Group.displayName;\n\nconst CommandItem = React.forwardRef<\n  React.ComponentRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      'flex cursor-pointer overflow-hidden rounded-md p-2 text-popover-foreground hover:bg-primary-foreground/10',\n      className\n    )}\n    {...props}\n  />\n));\nCommandItem.displayName = CommandPrimitive.Item.displayName;\n\nconst CommandList = React.forwardRef<\n  React.ComponentRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\n      'flex flex-col gap-2 overflow-hidden rounded-md text-popover-foreground',\n      className\n    )}\n    {...props}\n  />\n));\nCommandList.displayName = CommandPrimitive.List.displayName;\n\nconst CommandDialog = ({\n  children,\n  ...props\n}: DialogProps & {\n  children: React.ReactNode;\n}) => {\n  return (\n    <Dialog {...props}>\n      <VisuallyHidden>\n      <DialogHeader>\n        <DialogTitle>\n        </DialogTitle>\n      </DialogHeader>\n      </VisuallyHidden>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command>{children}</Command>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nCommandDialog.displayName = 'CommandDialog';\nexport {\n  Command,\n  CommandDialog,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList\n};\n\n",
  "dialog": "'use client';\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\nimport * as React from 'react';\n\nimport { cn } from '../lib';\n\nconst Dialog = DialogPrimitive.Root;\n\nconst DialogTrigger = DialogPrimitive.Trigger;\n\nconst DialogPortal = DialogPrimitive.Portal;\n\nconst DialogClose = DialogPrimitive.Close;\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      'fixed inset-0 z-50 bg-primary/30 data-[state=open]:animate-in data-[state=closed]:animate-out',\n      className\n    )}\n    {...props}\n  />\n));\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        'fixed md:rounded-2xl rounded-lg left-[50%] top-[50%] z-50 grid w-[90vw] md:w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border border-border bg-background p-6 text-primary-foreground shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[10%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[10%] sm:rounded-2xl',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </DialogPrimitive.Content>\n  </DialogPortal>\n));\nDialogContent.displayName = DialogPrimitive.Content.displayName;\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      'flex flex-col space-y-1.5 text-center sm:text-left',\n      className\n    )}\n    {...props}\n  />\n);\nDialogHeader.displayName = 'DialogHeader';\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',\n      className\n    )}\n    {...props}\n  />\n);\nDialogFooter.displayName = 'DialogFooter';\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      'text-lg font-semibold leading-none tracking-tight',\n      className\n    )}\n    {...props}\n  />\n));\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn('text-sm text-muted-foreground', className)}\n    {...props}\n  />\n));\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger\n};\n\n",
  "dropdown": "'use client';\nimport * as DropdownMenu from '@radix-ui/react-dropdown-menu';\nimport { cva } from 'class-variance-authority';\nimport { ArrowRight01Icon } from 'hugeicons-react';\nimport React from 'react';\nimport { cn } from '../lib';\nimport { Button } from './button';\n\nconst dropdownContentVariants = cva(\n  'whitespace-nowrap flex flex-col gap-1 max-h-[300px] overflow-y-auto no-scrollbar p-2.5 rounded-md text-sm transition-colors disabled:pointer-events-none disabled:opacity-50 w-full',\n  {\n    variants: {\n      variant: {\n        default: 'bg-popover text-popover-foreground shadow w-full',\n        secondary: 'bg-background text-foreground shadow w-full',\n      },\n    },\n  }\n);\n\nconst dropdownTriggerVariants = cva(\n  'flex items-center justify-center gap-2 px-4 py-2 whitespace-nowrap rounded-md text-sm focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 shadow',\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-popover text-popover-foreground shadow hover:bg-accent',\n        secondary: 'bg-background border border-border text-foreground shadow hover:bg-popover/90',\n      },\n    },\n  }\n);\n\nconst dropdownSubTriggerVariants = cva(\n  'flex items-center justify-between items-center gap-2 pl-4 pr-2 py-2 whitespace-nowrap rounded-md text-sm font-medium focus:bg-accent focus-visible:outline-none disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        default: 'bg-popover text-popover-foreground hover:bg-accent',\n        secondary: 'bg-popover text-popover-foreground hover:bg-accent',\n      },\n    },\n  }\n);\n\nconst dropdownItemClassName =\n  'px-4 py-2 flex items-center justify-between gap-1 focus-visible:outline-none rounded-md focus:bg-accent cursor-pointer';\n\nconst Dropdown = ({\n  children,\n  options,\n  icon,\n  variant = 'default',\n  alignment = 'start',\n  triggerSize = 'md',\n  rightSlot,\n}: {\n  icon?: React.ReactNode;\n  alignment?: 'start' | 'end' | 'center';\n  variant?: 'default' | 'secondary';\n  children: React.ReactNode;\n  triggerSize?: 'sm' | 'md' | 'lg';\n  rightSlot?: React.ReactNode;\n  options: {\n    action?: (event: Event) => void;\n    element: React.ReactNode;\n    icon?: React.ReactNode;\n    rightSlot?: React.ReactNode;\n    suboptions?: {\n      action?: (event: Event) => void;\n      element: React.ReactNode;\n      icon?: React.ReactNode;\n      rightSlot?: React.ReactNode;\n    }[];\n  }[];\n}) => {\n  return (\n    <DropdownMenu.Root>\n      <DropdownMenu.Trigger asChild>\n        <Button\n          size={triggerSize}\n          className={cn(\n            dropdownTriggerVariants({ variant: variant }),\n            'group'\n            // icon ? 'pl-2' : ''\n          )}\n          aria-label=\"Customise options\"\n        >\n          {icon ? icon : null} {children}\n          <div className='group-aria-expanded:rotate-90 transition-transform duration-100'>{rightSlot ? rightSlot : null}</div>\n        </Button>\n      </DropdownMenu.Trigger>\n\n      <DropdownMenu.Portal>\n        <DropdownMenu.Content\n          align={alignment}\n          className={dropdownContentVariants({ variant: variant })}\n          sideOffset={5}\n        >\n          {options.map((option, index) =>\n            option.suboptions ? (\n              <DropdownMenu.Sub key={index}>\n                <DropdownMenu.SubTrigger\n                  className={dropdownSubTriggerVariants({ variant: variant })}\n                >\n                  {option.icon ? option.icon : null} {option.element}\n                  <ArrowRight01Icon size={16} />\n                </DropdownMenu.SubTrigger>\n                <DropdownMenu.Portal>\n                  <DropdownMenu.SubContent\n                    className={dropdownContentVariants({ variant: variant })}\n                    sideOffset={2}\n                    alignOffset={-5}\n                  >\n                    {option.suboptions.map((suboption, index) => (\n                      <DropdownMenu.Item\n                        key={index}\n                        className={dropdownItemClassName}\n                        onSelect={suboption.action}\n                      >\n                        <div className=\"flex items-center gap-1\">\n                          {suboption.icon ? suboption.icon : null}{' '}\n                          {suboption.element}\n                        </div>\n                        {suboption.rightSlot ? suboption.rightSlot : null}\n                      </DropdownMenu.Item>\n                    ))}\n                  </DropdownMenu.SubContent>\n                </DropdownMenu.Portal>\n              </DropdownMenu.Sub>\n            ) : (\n              <DropdownMenu.Item\n                key={index}\n                className={dropdownItemClassName}\n                onSelect={option.action}\n              >\n                <div className=\"flex items-center gap-2\">\n                  {option.icon ? option.icon : null} {option.element}\n                </div>\n                {option.rightSlot ? option.rightSlot : null}\n              </DropdownMenu.Item>\n            )\n          )}\n        </DropdownMenu.Content>\n      </DropdownMenu.Portal>\n    </DropdownMenu.Root>\n  );\n};\n\nDropdown.displayName = 'Dropdown';\nexport { Dropdown };\n",
  "input": "import * as React from 'react';\nimport { cn } from '../lib';\n\ninterface InputProps extends React.ComponentProps<'input'> {\n  label?: string;\n  inputClassName?: string;\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, label, inputClassName, ...props }, ref) => {\n    return (\n      <div className={cn('flex flex-col gap-1 w-full', className)}>\n        {label && <label className=\"text-sm text-muted-foreground\">{label}</label>}\n        <input\n          className={cn(\n            'flex min-h-9 w-full rounded-lg border border-input bg-input px-3 py-1 text-base text-primary-foreground shadow transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n            inputClassName\n          )}\n          ref={ref}\n          {...props}\n        />\n      </div>\n    );\n  }\n);\nInput.displayName = 'Input';\n\nexport { Input };\n",
  "pagination": "import {\n  ArrowLeft01Icon,\n  ArrowRight01Icon,\n  MoreHorizontalIcon,\n} from 'hugeicons-react';\nimport * as React from 'react';\nimport { cn } from '../lib';\nimport { Button } from './button';\n\ninterface PaginationProps {\n  length: number;\n  onClick: (value: number) => void;\n  className?: string;\n  currentPage?: number;\n}\n\nconst Pagination = ({\n  length,\n  onClick,\n  className,\n  currentPage = 1,\n}: PaginationProps) => {\n  const getPageNumbers = () => {\n    if (length <= 5) {\n      return Array.from({ length }, (_, i) => i + 1);\n    }\n\n    const pages: (number | string)[] = [];\n\n    pages.push(1);\n\n    if (currentPage <= 3) {\n      pages.push(2, 3, 4);\n      pages.push('_blank');\n    } else if (currentPage >= length - 2) {\n      pages.push('_blank');\n      pages.push(length - 3, length - 2, length - 1);\n    } else {\n      pages.push('_blank');\n      pages.push(currentPage - 1, currentPage, currentPage + 1);\n      pages.push('_blank');\n    }\n\n    pages.push(length);\n\n    return pages;\n  };\n\n  return (\n    <nav\n      role=\"navigation\"\n      aria-label=\"pagination\"\n      className={cn('mx-auto flex w-full justify-center', className)}\n    >\n      <div className=\"flex flex-row items-center gap-1\">\n        <Button\n          size=\"xs\"\n          variant=\"ghost\"\n          onClick={() => onClick(Math.max(1, currentPage - 1))}\n          className={cn(currentPage === 1 && 'invisible', 'gap-1')}\n          aria-label=\"Go to previous page\"\n        >\n          <ArrowLeft01Icon size={16} />\n        </Button>\n\n        {getPageNumbers().map((pageNumber, index) => (\n          <div key={index}>\n            {pageNumber === '_blank' ? (\n              <span className=\"px-3 py-2\">\n                <MoreHorizontalIcon size={16} />\n              </span>\n            ) : (\n              <Button\n                size=\"xs\"\n                variant={'ghost'}\n                onClick={() => onClick(pageNumber as number)}\n                className={cn(pageNumber === currentPage ? 'bg-accent' : '')}\n                aria-current={pageNumber === currentPage ? 'page' : undefined}\n              >\n                {pageNumber}\n              </Button>\n            )}\n          </div>\n        ))}\n\n        <Button\n          size=\"xs\"\n          variant=\"ghost\"\n          onClick={() => onClick(Math.min(length, currentPage + 1))}\n          className={cn(currentPage === length && 'invisible', 'gap-1')}\n          aria-label=\"Go to next page\"\n        >\n          <ArrowRight01Icon size={16} />\n        </Button>\n      </div>\n    </nav>\n  );\n};\n\nexport { Pagination };\n",
  "sidebar": "'use client';\nimport { Logout01Icon } from 'hugeicons-react';\nimport { useRouter } from 'next/navigation.js';\nimport React, {\n  createContext,\n  JSX,\n  ReactNode,\n  useContext,\n  useState,\n} from 'react';\nimport { cn } from '../lib';\nimport { Button } from './button';\n\ninterface NavSection {\n  title?: string;\n  items: NavItem[];\n}\ninterface NavItem {\n  icon?: ReactNode;\n  title: string;\n  href: string;\n}\n\ninterface SidebarProps {\n  header?: ReactNode;\n  contents: NavSection[];\n  footer?: ReactNode;\n  showCloseButton?: boolean;\n  className?: string;\n  position?: 'left' | 'right';\n}\n\ninterface SidebarContextType {\n  isOpen: boolean;\n  toggleSidebar: () => void;\n}\n\ninterface SidebarProviderProps {\n  children: ReactNode;\n}\n\ninterface SidebarLayoutProps {\n  children: ReactNode;\n}\n\nconst SidebarContext = createContext<SidebarContextType | undefined>(undefined);\n\nexport function SidebarProvider({\n  children,\n}: SidebarProviderProps): JSX.Element {\n  const [isOpen, setIsOpen] = useState<boolean>(true);\n\n  const toggleSidebar = (): void => setIsOpen((prev) => !prev);\n\n  return (\n    <SidebarContext.Provider value={{ isOpen, toggleSidebar }}>\n      {children}\n    </SidebarContext.Provider>\n  );\n}\n\nexport function useSidebar(): SidebarContextType {\n  const context = useContext(SidebarContext);\n  if (context === undefined) {\n    throw new Error('useSidebar must be used within a SidebarProvider');\n  }\n  return context;\n}\n\nconst sidebarAnimationVariants = {\n  left: '-translate-x-full',\n  right: 'translate-x-full',\n};\n\n// Sidebar component\nexport function Sidebar({\n  header,\n  contents,\n  footer,\n  showCloseButton = false,\n  className = '',\n  position = 'left',\n}: SidebarProps): JSX.Element {\n  const { isOpen, toggleSidebar } = useSidebar();\n  const router = useRouter();\n\n  return (\n    <aside\n      className={cn(\n        'sticky left-0 h-full flex-shrink-0 border-r border-border bg-muted/30 transition-all duration-300 ease-in-out',\n        isOpen ? 'w-sidebar-width' : 'w-sidebar-width-collapsed',\n        position === 'right' ? 'right-0' : 'left-0',\n        className\n      )}\n    >\n      <div className=\"flex h-full flex-col\">\n        {/* Header */}\n        {header && (\n          <div\n            className={cn(\n              'relative flex items-center justify-between border-b border-border text-primary-foreground',\n              isOpen ? 'p-4' : 'p-2 py-4'\n            )}\n          >\n            <div className=\"flex h-10 w-full items-center justify-between\">\n              <div\n                className={cn(\n                  'flex-1 transition-all duration-300 ease-in-out',\n                  isOpen\n                    ? 'translate-x-0 opacity-100'\n                    : sidebarAnimationVariants[position] + ' absolute opacity-0'\n                )}\n              >\n                {header}\n              </div>\n              {showCloseButton && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={toggleSidebar}\n                  className=\"mx-auto p-1\"\n                  aria-label=\"Toggle sidebar\"\n                >\n                  <Logout01Icon\n                    size={18}\n                    className={cn(\n                      'transition-transform duration-300 ease-in-out',\n                      position === 'left'\n                        ? isOpen\n                          ? 'rotate-180'\n                          : ''\n                        : isOpen\n                          ? ''\n                          : 'rotate-180'\n                    )}\n                  />\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Navigation */}\n        <nav\n          className={cn(\n            'flex-1 overflow-y-auto overflow-x-hidden overscroll-contain',\n            isOpen ? 'p-4' : 'px-2 py-4'\n          )}\n        >\n          <ul className=\"space-y-2\">\n            {contents.map((section, index) => (\n              <div className=\"border-b border-border pb-4\" key={index}>\n                <p\n                  key={index}\n                  className=\"mb-4 text-sm font-medium text-primary-foreground\"\n                >\n                  {section.title}\n                </p>\n                {section.items.map((item, index) => (\n                  <li key={index}>\n                    <Button\n                      size={'md'}\n                      variant=\"ghost\"\n                      onClick={() => router.push(item.href)}\n                      className={cn(\n                        'flex w-full items-center justify-start gap-2 rounded-lg transition-colors',\n                        isOpen ? 'px-3 py-2' : 'justify-center p-2'\n                      )}\n                    >\n                      <div className=\"no-shrink\">{item.icon}</div>\n                      <div\n                        className={cn(\n                          'transition-all duration-100 ease-in-out',\n                          isOpen\n                            ? 'translate-x-0 opacity-100'\n                            : sidebarAnimationVariants[position] +\n                                ' absolute opacity-0'\n                        )}\n                      >\n                        {item.title}\n                      </div>\n                    </Button>\n                  </li>\n                ))}\n              </div>\n            ))}\n          </ul>\n        </nav>\n\n        {/* Footer */}\n        {footer && (\n          <div\n            className=\"border-t border-border p-4 transition-opacity duration-300 ease-in-out data-[open=false]:opacity-0 data-[open=true]:opacity-100\"\n            data-open={isOpen}\n          >\n            {isOpen ? footer : null}\n          </div>\n        )}\n      </div>\n    </aside>\n  );\n}\n\n// Layout component\nexport function SidebarLayout({ children }: SidebarLayoutProps): JSX.Element {\n  const { isOpen } = useSidebar();\n\n  return (\n    <div className={`flex h-svh transition-all duration-300 ease-in-out`}>\n      {children}\n    </div>\n  );\n}\n",
  "table": "import * as React from 'react';\nimport { cn } from '../lib';\nimport { Pagination } from './pagination';\ninterface TableProps extends React.HTMLAttributes<HTMLTableElement> {\n  data: Record<string, any>[];\n  itemsPerPage?: number;\n  tableClassName?: string;\n}\n\nconst Table = React.forwardRef<HTMLTableElement, TableProps>(\n  ({ className, data, itemsPerPage = 10, tableClassName, ...props }, ref) => {\n    const [currentPage, setCurrentPage] = React.useState(1);\n\n    const totalPages = Math.ceil(data.length / itemsPerPage);\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    const currentData = data.slice(startIndex, endIndex);\n\n    const columns = Object.keys(data[0]).map((key) => ({\n      header: key.charAt(0).toUpperCase() + key.slice(1),\n      accessor: key,\n    }));\n\n    return (\n      <div\n        className={cn(\n          'flex flex-col gap-4 overflow-hidden rounded-lg border border-border shadow bg-background',\n          className\n        )}\n      >\n        <div className=\"relative w-full overflow-auto\">\n          <table\n            ref={ref}\n            className={cn('w-full caption-bottom text-sm', tableClassName)}\n            {...props}\n          >\n            <thead className=\"bg-accent/50 [&_tr]:border-b [&_tr]:border-border\">\n              <tr className=\"border-b transition-colors\">\n                {columns.map((column, index) => (\n                  <th\n                    key={index}\n                    className=\"h-10 p-4 text-left align-middle font-medium text-primary-foreground\"\n                  >\n                    {column.header}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody className=\"[&_tr:last-child]:border-0\">\n              {currentData.map((row, rowIndex) => (\n                <tr\n                  key={rowIndex}\n                  className=\"border-b border-border transition-colors hover:bg-accent/50 data-[state=selected]:bg-accent\"\n                >\n                  {columns.map((column, colIndex) => (\n                    <td\n                      key={colIndex}\n                      className=\"p-4 align-middle text-foreground\"\n                    >\n                      {row[column.accessor]}\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n        {totalPages > 1 && (\n          <div className=\"border-t border-border py-1\">\n            <Pagination\n              length={totalPages}\n              currentPage={currentPage}\n              onClick={setCurrentPage}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nTable.displayName = 'Table';\nexport { Table };\n",
  "tabs": "'use client';\n\nimport * as TabsPrimitive from '@radix-ui/react-tabs';\nimport * as React from 'react';\nimport { cn } from '../lib';\n\nconst Tabs = TabsPrimitive.Root;\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      'inline-flex h-9 items-center justify-center rounded-lg p-1 text-muted-foreground',\n      className\n    )}\n    {...props}\n  />\n));\nTabsList.displayName = TabsPrimitive.List.displayName;\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      'inline-flex items-center justify-center whitespace-nowrap px-3 py-1 text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:border-b-2 data-[state=inactive]:border-b-0 data-[state=active]:border-border data-[state=active]:text-foreground',\n      className\n    )}\n    {...props}\n  />\n));\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName;\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      'mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n      className\n    )}\n    {...props}\n  />\n));\nTabsContent.displayName = TabsPrimitive.Content.displayName;\n\nexport { Tabs, TabsContent, TabsList, TabsTrigger };\n",
  "tooltip": "import * as TooltipPrimitive from '@radix-ui/react-tooltip';\nimport * as React from 'react';\nimport { cn } from '../lib';\n\nconst TooltipProvider = TooltipPrimitive.Provider;\n\nconst Tooltip = TooltipPrimitive.Root;\n\nconst TooltipTrigger = TooltipPrimitive.Trigger;\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        'z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n));\nTooltipContent.displayName = TooltipPrimitive.Content.displayName;\n\nexport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger };\n\n",
  "use-toast": "'use client';\nimport { Cancel01Icon } from 'hugeicons-react';\nimport React, { createContext, useCallback, useContext, useState } from 'react';\n\ntype ToastTypes = 'success' | 'error' | 'warning' | 'info';\ntype ToastContextType = {\n  showToast: (message: string, type: ToastTypes, duration: number) => void;\n  removeToast: (id: number) => void;\n};\n\nconst ToastContext = createContext<ToastContextType | undefined>(undefined);\n\nexport function ToastProvider({ children }: { children: React.ReactNode }) {\n  const [toasts, setToasts] = useState<\n    { id: number; message: string; type: ToastTypes; duration: number; timer: NodeJS.Timeout }[]\n  >([]);\n\n  const removeToast = useCallback((id: number) => {\n    setToasts((prev) => {\n      const toast = prev.find((t) => t.id === id);\n      if (toast) {\n        clearTimeout(toast.timer);\n      }\n      return prev.filter((toast) => toast.id !== id);\n    });\n  }, []);\n\n  const showToast = useCallback(\n    (message: string, type: ToastTypes = 'success', duration = 3000) => {\n      const id = Math.random();\n      \n      setToasts((prev) => {\n        const timer = setTimeout(() => {\n          removeToast(id);\n        }, duration);\n        \n        return [...prev, { id, message, type, duration, timer }];\n      });\n    },\n    [removeToast]\n  );\n\n  // Cleanup timers when component unmounts\n  React.useEffect(() => {\n    return () => {\n      toasts.forEach((toast) => clearTimeout(toast.timer));\n    };\n  }, [toasts]);\n\n  const Toast = ({\n    message,\n    type,\n    duration,\n    id,\n  }: {\n    message: string;\n    type: ToastTypes;\n    duration: number;\n    id: number;\n  }) => {\n    const baseStyles = `\n      relative px-4 py-2 text-sm rounded-lg shadow-lg \n      transition-all duration-300 ease-in-out\n      animate-in fade-in-0 slide-in-from-bottom-3\n      hover:opacity-80\n    `;\n\n    const typeStyles = {\n      success: 'bg-primary text-primary-foreground ring-1 ring-ring',\n      error:\n        'bg-destructive text-destructive-foreground ring-1 ring-destructive',\n      warning:\n        'bg-yellow-200 text-yellow-500 ring-1 ring-yellow-200 text-yellow-700',\n      info: 'bg-complimentary text-complimentary-foreground ring-1 ring-complimentary',\n    };\n\n    return (\n      <div className={`${baseStyles} ${typeStyles[type]}`}>\n        <div className=\"flex items-center justify-between gap-2 whitespace-nowrap\">\n          <span>{message}</span>\n          <button\n            onClick={() => removeToast(id)}\n            className=\"ml-2 hover:text-primary-foreground/80\"\n          >\n            <Cancel01Icon size={16} />\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <ToastContext.Provider value={{ showToast, removeToast }}>\n      {children}\n      <div className=\"fixed bottom-4 right-4 z-50 flex flex-col-reverse gap-2\">\n        {toasts.map((toast) => (\n          <Toast key={toast.id} {...toast} />\n        ))}\n      </div>\n    </ToastContext.Provider>\n  );\n}\n\nexport function useToast() {\n  const context = useContext(ToastContext);\n  if (context === undefined) {\n    throw new Error('useToast must be used within a ToastProvider');\n  }\n  return context;\n}\n",
  "login-01": "'use client';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport React from 'react';\nimport {\n  Button,\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  Input,\n} from '../components';\n\ninterface LoginBlockProps {\n  onSubmit: (username: string, password: string) => void;\n}\n\nconst LoginBlock = ({ onSubmit }: LoginBlockProps) => {\n  const [username, setUsername] = React.useState('');\n  const [password, setPassword] = React.useState('');\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit(username, password);\n  };\n\n  return (\n    <div className=\"flex w-[70vw] overflow-hidden gap-4\">\n      <Card variant=\"secondary\" className=\"w-1/2 p-8\">\n        <CardHeader className=\"items-center text-center\">\n          <CardTitle className=\"mb-2 text-3xl font-bold text-primary-foreground\">\n            Welcome Back!\n          </CardTitle>\n          <CardDescription className=\"text-muted-foreground\">\n            Log into your account\n          </CardDescription>\n        </CardHeader>\n\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"flex flex-col space-y-2\">\n              <Input\n                id=\"username\"\n                placeholder=\"John Doe\"\n                required\n                label=\"Username\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                className=\"[&_label]:text-muted-foreground\"\n              />\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"********\"\n                label=\"Password\"\n                required\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"[&_label]:text-muted-foreground\"\n              />\n              <Link\n                href=\"/forgot-password\"\n                className=\"ml-auto flex text-xs hover:underline\"\n              >\n                Forgot password?\n              </Link>\n            </div>\n\n            <div className=\"flex flex-col gap-1\">\n              <Button\n                size=\"sm\"\n                type=\"submit\"\n                className=\"w-full font-medium\"\n                variant=\"default\"\n              >\n                Log in\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n\n        <CardFooter className=\"flex flex-col gap-6\">\n          <div className=\"relative flex w-full items-center gap-2 text-xs\">\n            <span className=\"w-full border-t border-border\" />\n            <span className=\"whitespace-nowrap px-4 text-muted-foreground\">\n              or continue with\n            </span>\n            <span className=\"w-full border-t border-border\" />\n          </div>\n\n          <div className=\"flex w-full gap-4\">\n            <Button\n              variant=\"outline\"\n              className=\"h-11 w-full text-muted-foreground\"\n              type=\"button\"\n            >\n              Google\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"h-11 w-full text-muted-foreground\"\n              type=\"button\"\n            >\n              GitHub\n            </Button>\n          </div>\n\n          <p className=\"text-center text-sm text-muted-foreground\">\n            Don&apos;t have an account?{' '}\n            <Button\n              variant=\"link\"\n              size=\"sm\"\n              className=\"text-primary-foreground hover:text-complimentary-foreground\"\n            >\n              Sign up!\n            </Button>\n          </p>\n        </CardFooter>\n      </Card>\n      <div className=\"flex w-1/2 items-center justify-center bg-muted rounded-lg\">\n        <Image\n          src={'/login-01.png'}\n          alt=\"login\"\n          width={500}\n          height={500}\n          className=\"h-full w-full object-cover rounded-lg\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport { LoginBlock };\n"
};

export function getComponentSource(name: string): string | undefined {
  return componentSources[name.toLowerCase()];
}
